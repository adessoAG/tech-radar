[{"radar": "java", "quadrant": 1, "ring": "einsetzen", "name": "MongoDB", "kommentare": null, "desc": "MongoDB hat sich als Baustein für den Umgang mit dokumentenorientierten und schwach strukturierten Daten bewährt. Besonders wenn große Datenmengen verwaltet werden müssen und Replikation benötigt wird."}, {"radar": "java", "quadrant": 1, "ring": "einsetzen", "name": "Elastic Stack als Log-Plattform", "kommentare": null, "desc": "In einigen Projekten wurde bereits der Open-Source Elastic Stack (vormals ELK-Stack) mit Elasticsearch zur Persistenz, Logstash für die Log-Verarbeitung und Kibana für die interaktive Analyse eingesetzt. Im Vergleich zu Graylog bietet Elastic Stack weniger Enterprise-Features und ist relativ komplex in der Konfiguration. Höhere Betriebsanforderungen und Security-Anforderungen sind nur als eigenständiges kostenpflichtiges Produkt (Shield) verfügbar."}, {"radar": "java", "quadrant": 1, "ring": "einsetzen", "name": "Oracle DB", "kommentare": null, "desc": "Vielfach eingesetzte DB für strukturierte Daten. Einsetzbar insbesondere bei großen Datenmengen und für lastintensive Applikationen, da aufgrund des Toolsets gute Analysen und Optimierungen vorgenommen werden können."}, {"radar": "java", "quadrant": 3, "ring": "evaluieren", "name": "Gatling", "kommentare": null, "desc": "Eine neue Alternative zu JMeter für Last- und Performanz-Tests mit einem imperativen statt deklativen Ansatz ('Test as Code'). Dadurch fügt sich Gatling wesntlich besser in die Werkzeugkette vo Entwicklern ein, führt aber häufig bei klassischen Testteams zu Widerständen da dort das notwendige Entwicklungs-KnowHow fehlt."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "Keycloak", "kommentare": null, "desc": "Keycloak ist ein Open-Source-Softwareprodukt, das Single Sign-On mit Identity Management und Access Management für moderne Anwendungen und Dienste ermöglicht. Keycloak wird in einigen adesso Projekten eingesetzt und integriert sich sehr einfach mit Spring Security."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "Eclipse", "kommentare": null, "desc": "Eclipse stellt zwar nicht mehr die neueste Generation von IDEs dar, kann allerdings für die Java-Entwicklung immer noch sehr produktiv genutzt werden. Eclipse verfügt über eine breite Nutzer-Basis, hat jedoch in den vergangenen Jahren zunehmend Nutzer an Alternative IDEs, z.B. IntelliJ, verloren."}, {"radar": "java", "quadrant": 3, "ring": "evaluieren", "name": "Test-Manager/Lab-Testmanager", "kommentare": null, "desc": "Strukturierung und Nachverfolgung von Tests und Ergebnissen. Direkte Integration in den TFS und Nachverfolgung bis in einzelne Code-Abschnitte. Automatisierte Erstellung von Testumgebungen mit immer gleichen Vorbedingungen."}, {"radar": "java", "quadrant": 4, "ring": "evaluieren", "name": "concurrency-limits", "kommentare": null, "desc": "Concurrency-Limits ist eine Java-Bibliothek, die durch Beobachtung des Systems versucht den optimalen Durchsatz und Latenz eines Serivce zu ermitteln. Ziel ist die Einstellungen für Ausfallsicherheit und Skalierung nicht statisch sondern dynamisch zu ermitteln."}, {"radar": "java", "quadrant": 4, "ring": "überdenken", "name": "RCP ", "kommentare": null, "desc": "Zu proprietär und schwergewichtig mit hohem Einarbeitungsaufwand und einer engen Kopplung an Eclipse. Wenn möglich, dann sollte JavaFX eingesetzt werden."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "Structure101", "kommentare": null, "desc": "Structure 101 wird von uns häufig im Rahmen von Architekturreviews eingesetzt und wird für von uns als geeignetes Werkzeug für diese Aufgabe empfohlen."}, {"radar": "java", "quadrant": 4, "ring": "einsetzen", "name": "Jersey / RESTeasy", "kommentare": null, "desc": "Jersey/RESTeasy ist eine etablierte JAX-RS Implementierung, die sich in mehreren Projekten bewährt hat. Daher wird die Verwendung empfohlen."}, {"radar": "java", "quadrant": 1, "ring": "einsetzen", "name": "ElasticSearch", "kommentare": null, "desc": "Bewährte, belastbare Datenbank mit umfangreichen Features für die Handhabung textueller Inhalte, u.a. Volltextsuche."}, {"radar": "java", "quadrant": 1, "ring": "einsetzen", "name": "MSSQL", "kommentare": null, "desc": "Microsoft SQL Server ist die relationale Standarddatenbank für Microsoft Umgebungen. Die Datenbank ist gut integriert mit anderen MS Produkten und hat sich vielfach bewährt. Mittlerweile wird MSSQL  auch für Linux-Umgebungen angeboten und ist daher auch für klassische Java-Projekte zu erwägen."}, {"radar": "java", "quadrant": 4, "ring": "evaluieren", "name": "Axon Framework", "kommentare": null, "desc": "Bietet ein API für die Entwicklung von Event Sourcing- und CQRS-Anwendungen. Unterstützt die Anwendung von DDD im Projekt."}, {"radar": "java", "quadrant": 2, "ring": "einsetzen", "name": "Reactive Programming", "kommentare": null, "desc": "Reaktive Systeme werden im Allgemeinen als schneller und robuster als herkömmliche Software beschrieben. Diese Eigenschaften sollen sich mit den vier Kernpunkten des Reactive Manifestos umsetzen lassen: Reaktive Systeme sind Antwortbereit (Responsive), Widerstandsfähig (Resilient), Elastisch (Elastic) und Nachrichtenorientiert (Message Driven). Quelle: https://www.informatik-aktuell.de/entwicklung/programmiersprachen/reactive-programming-mehr-als-nur-streams-und-lambdas.html"}, {"radar": "java", "quadrant": 1, "ring": "einsetzen", "name": "Gitlab", "kommentare": "Architektenzirkel 11/2018", "desc": "Ermöglicht professionelle Softwareentwicklung mit oder ohne Branching-Modelle mit integrierter CI Pipeline. Ermöglicht durch Social Coding Features intensive und professionelle Auseinandersetzung mit dem Code im Team."}, {"radar": "java", "quadrant": 2, "ring": "einsetzen", "name": "Verteilte Architekturen", "kommentare": null, "desc": "Verbinden wir Flexibilität bzgl. Delivery, Technologieauswahl, Skalierbarkeit und der Unterstützung agiler Vorgehensweisen und Organisationformen. Für die Umsetzung bietet sich unter anderem leichtgewichtige Architekturen, asynchrone Kommunikation, RESTful Schnittstellen, Microservices, Docker, Spring Boot, Spring Cloud und ggf. Kafka an. Gleichzeitig ist jedoch jeweils zu bewerten, ob die zusätzlichen Komplexitätstreiber verteilter Architekturen im Sinne der Projektziele gerechtfertigt sind."}, {"radar": "java", "quadrant": 2, "ring": "überdenken", "name": "Java Desktop Clients", "kommentare": null, "desc": "Native Java-Desktop-Applikationen entwickeln wir immer seltener. Sie werden zunehmend durch Single-Page-Web-Applikationen und Desktop-Anwendunggen auf Electron Basis verdrängt. Falls doch eine Java-Desktop-Anwendung gefordert ist, dann ist JavaFX das Mittel der Wahl."}, {"radar": "java", "quadrant": 2, "ring": "überdenken", "name": "JEE Portal Server", "kommentare": null, "desc": "WebSphere Portal, Netwaever (SAP), Liferay CMS, Oracle Portalserver und weitere Server finden wir häufig in Kundensituationen vor. Falls nicht, dann raten wir davon ab, da für die meisten Kundensituationen zu teuer, oft Grund für hohe Entwicklungsaufwände bei wenig realistischem Nutzen. Teuer, komplex und immer seltener."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "Kafka", "kommentare": null, "desc": "Eine oft verwendete Implementierung des Event Sourcing Ansatzes. Kafka kann z. B. für die Entkopplung von Systemen eingesetzt werden. Es kommt oftmals im Microservice Umfeld vor."}, {"radar": "java", "quadrant": 4, "ring": "überdenken", "name": "Apache CXF", "kommentare": "Meine eigenen (Marcus Danner) Erfahrungen mit CXF beziehen sich auf die Bereitstellung hybrider Web-Services als entweder RESTful- oder SOAP-Service mittels JAX-RS bzw. JAX-WS innerhalb einer Applikation. Möchte man beides innerhalb einer Projekt-Konfiguration anbieten und sich dafür nicht zwei Abhängigkeiten von unterschiedlichen Frameworks einhandeln, kenne ich zu CXF keine bessere Alternative. Dem Punkt von Eric bzgl. Debuggen stimme ich zu, nachdem ich Quellcode einmal verstanden hatte, hat's aber straight forward funktioniert.", "desc": "Die Einschätzung von Eric Giese ist, dass sehr viel Zeit mit dem Debuggen von cxf verbracht werden muss. Insbesondere die jaxrs-client-api ist sehr schlecht umgesetzt was die Spec-konformität und die zahlreichen Bugs angeht."}, {"radar": "java", "quadrant": 4, "ring": "einsetzen", "name": "RxJava", "kommentare": null, "desc": "Die reaktive Programmierung hält überall dort Einzug wo wir es mit skalierbaren und interaktiven Systemen zu tun haben die unter hoher Last stehen und auf großen Datenvolumen arbeiten. Hierbei geht es um nicht blockierende APIs, Asynchronität und Messageverarbeitung. Schaut man sich eine herkömmliche 360 Grad Kundesicht an, so stellt man fest das die hierfür notwendigen Daten herkömmlicherweise meist sequentiell angefordert und aufbereitet werden. Die durch die rein sequentielle Verarbeitung bedingten Ladezeiten und fortlaufende Aktualisierung entsprechen jedoch nicht den Erwartungen der Nutzer. Die Ladezeiten und fortlaufenden Aktualisierungen können durch Programmierkonstrukte wie Futures und Observables zwar deutlich gesenkt werden, führen jedoch bei entsprechender fachlichen Komplexität zu unübersichtlichen und schwer wartbaren Code. Abhilfe schaffen hier reaktive Programmiermodelle und deren Umsetzung in Java Bereich z.B. mittels RXJava."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "Maven", "kommentare": null, "desc": "Maven ist in der Java Entwicklung seit Jahren der Standard wenn es um Buildmanagement geht und stellte eine Lösung zum Umgang mit Abhängigkeiten von Softwareartefakten zur Verfügung. Im Laufe der Jahre entstanden diverse Erweiterungen (Plugins). Angefangen vom automatischen Deployment bis hin zur Anbindung von QS Werkzeugen wobei diese allerdings unterscheidliche Qualität aufweisen. Bei herkömmlichen Entwicklungsprojekten stellt dies jedoch kein ernsthaftes Problem dar, da die hierbei eingesetzten Plugins in einer entsprechenden Qualität zur Verfügung stehen. Darüber hinaus können bei Bedarf eigene Plugins geschrieben werden. Die Beschreibung der Buildprozesse erfolgt per XML und ist somit manchmal etwas länglich. Des Weiteren bietet Maven mit seiner Möglichkeit zur Modularisierung mittels „Module“ und „Profile“ Konzepte an um mit der Komplexität entsprechend umzugehen. Bei adesso hat Maven im Rahmen der Buildwerkzeuge eine sehr hohe Verbreitung und die Mehrheit unserer Kunden setzt Maven seit Jahren ein. Maven wurde aufgrund der Nachteile und vorhandener Alternativen (Gradle) im Rahmen des adesso Tech Radars sehr kontrovers diskutiert - unsere Meinung tendierte zwischen <i>Einsetzen<i/> und <i>Überdenken<i/>."}, {"radar": "java", "quadrant": 3, "ring": "evaluieren", "name": "Java Mission Control", "kommentare": null, "desc": "Java Mission Control zur Inspektion eines laufenden JVM Prozesses hat innerhalb des JDK den Vorgänger jvisualvm faktisch abgelöst. JMC wird für einfache Performanz- und Speicheranalysen in der Entwicklung empfohlen, falls die eingesetzte JDK Version dies zulässt. Für den Einsatz von JMC müssen die Oracle Lizenzbedingungen beachtet werden (s. a. http://www.oracle.com/technetwork/java/javase/documentation/java-se-product-editions-397069.pdf) da JMC nicht frei ist. Daher statt eines <i>einsetzen<i/> \"nur\" ein <i>evaluieren<i/>."}, {"radar": "java", "quadrant": 2, "ring": "evaluieren", "name": "Event Sourcing", "kommentare": null, "desc": "Beim Event Sourcing werden alle Veränderungen des Zustands einer Softwareanwendung als Sequenz von Events abgebildet und aufgezeichnet. Alle Events werden von einem Event Store aufgezeichnet, was den Vorteil bietet, dass alle Änderungen am System jederzeit durch eine Wiederholung der Events deterministisch nachgestellt werden können."}, {"radar": "java", "quadrant": 4, "ring": "einsetzen", "name": "Vert.x", "kommentare": null, "desc": "Vert.x ist ein polyglottes, ereignisorientiertes Anwendungsframework, das in der Java Virtual Machine läuft. Ähnliche Umgebungen für andere Programmiersprachen sind z. B. Node.js für JavaScript. Vert.x unterstützt das einfache schreiben von  Nonblocking (Lambda) Mircoservices und hat wenig Abhängigkeiten zu anderen Projekten. Mit Vert.x kann mit geringem Aufwand ein hochskalierendes Backend System schnell umgesetzt werden. In einem Projekt von Duran Alp und bei der Rabobank haben wir gute Erfahrungen mit Vert.x gemacht."}, {"radar": "java", "quadrant": 4, "ring": "einsetzen", "name": "Feign", "kommentare": "Architektenzirkel 11/2018", "desc": "Feign ist ein schlankes Framework zur schnellen und einfachen Entwicklung von HTTP-Clients. Es ist leicht mit anderen Technologien wie Spring Boot und -Hystrix integrierbar."}, {"radar": "java", "quadrant": 4, "ring": "einsetzen", "name": "Java", "kommentare": null, "desc": "Java ist weiterhin die Sprache mit großer Verbreitung bei unseren Kunden, mit umfangreicher Werkzeug- und Frameworkunterstützung, gerade für die Entwicklung auf der Serverseite. Sprachfeatures  neuer Versionen entwickeln die Sprache sinnvoll weiter und nehmen Weiterentwicklungen, z.B. die Verbreitung funktionaler Programmieransätze, auf."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "Balsamiq_java", "kommentare": null, "desc": "Wireframe-/Mockup-Werkzeug. Hilfreich in Angebots- und Entwicklungskontexten mit hohem Anteil an Prototypisierung und Formulargestaltung."}, {"radar": "java", "quadrant": 1, "ring": "einsetzen", "name": "Spark", "kommentare": null, "desc": "Spark ist die moderne Alternative zu Hadoop-MapReduce. Spark ist schneller und flexibler einsetzbar, auch losgelöst von vielen Hadoop-Komponenten."}, {"radar": "java", "quadrant": 4, "ring": "einsetzen", "name": "Spring Core", "kommentare": null, "desc": "Mit Spring Core steht in der Javaentwicklung ein Framework zu Verfügung das, basierend auf Dependency Injection, ein durchdachtes Programmiermodell aufweist. Dies ermöglicht u.a. eine bessere Strukturierung und losere Kopplung der Bestandteile eines Programms mit den damit einhergehenden Vorteilen wie bessere Testbarkeit und weniger Programm-Code. Spring Core ist zentrale Bestandteil des Spring Ökosystems und eignet sich damit sowohl zur Umsetzung komplexer Enterprise Anwendungen auf Basis der Spring Stacks als auch als CDI Alternative in klassischen JEE basierten Systemen."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "Swagger", "kommentare": null, "desc": "//TODO: Begründung ergänzen"}, {"radar": "java", "quadrant": 4, "ring": "überdenken", "name": "EJB", "kommentare": null, "desc": "EJBs bilden ein komplexes Komponentenmodell ab, welches schon in der Entwicklung unhandlich ist und eine Menge Boilerplate Code benötigt. Da es hierzu leichtgewichtigere Alternativen gibt, wurde es auf <i>überdenken</i> eingestuft. Es kann Sinn machen, EJBs in JEE Application Servern einzusetzen, falls z. B. besondere App Server Features (z. B. Transaktionsmanager für 2PC) benötigt werden oder der Kunde es unbedingt haben möchte."}, {"radar": "java", "quadrant": 2, "ring": "einsetzen", "name": "Domain Driven Design (DDD)", "kommentare": null, "desc": "Domain Driven Design (DDD) ist eine Herangehensweise für die Modellierung komplexer objektorientierter Softwaresysteme, in der maßgeblich die Architektur von der umzusetzende Fachlichkeit der Anwendungsdomäne beeinflusst wird."}, {"radar": "java", "quadrant": 1, "ring": "überdenken", "name": "Kubernetes (self-managed)", "kommentare": null, "desc": "Kubernetes ist ein anbieterunabhängiger Defacto-Standard für Container Management Plattformen. Der selbst gehostete Betrieb von Kubernetes ist aufgrund der Komplexität zu überdenken. Statt dessen ist ein gemanageter Betrieb von Kubernetes zu empfehlen."}, {"radar": "java", "quadrant": 1, "ring": "einsetzen", "name": "Graylog 2", "kommentare": null, "desc": "Graylog ist eine interessante Alternative zu Elastic Stack (vormals ELK-Stack) für das Log Management. Einfacher zu handhabende Variante im Vergleich zum Elastic Stack insbesondere wenn es darum geht bestimmten Benutzerkreisen ausgewählte Log-Streams zur Verfügung zu stellen."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "Vagrant", "kommentare": null, "desc": "Für das leichtgewichtige Aufsetzen und Konfigurieren von kompletten Entwicklungsservern wurde Vagrant bereits erfolgreich in adesso Projekten eingesetzt. Allerdings ist der Ansatz, lokale VM's zu starten, im Vergleich mit Container-Technologien, eher schwergewichtig. Deshalb wird Vagrant zurückgestuft auf <i>evaluieren</i>."}, {"radar": "java", "quadrant": 1, "ring": "einsetzen", "name": "Kubernetes (managed)", "kommentare": null, "desc": "Kubernetes ist ein anbieterunabhängiger Defacto-Standard für Container Management Plattformen. Viele (Cloud-)Anbieter bieten leicht zu nutzende gemanagete Lösungen für den Betrieb an. Ein Beispiel ist Azure Kubernetes Service (AKS)."}, {"radar": "java", "quadrant": 2, "ring": "einsetzen", "name": "Automatisierte End-to-end Tests", "kommentare": null, "desc": "Moderne Webanwendungen und entsprechendes Tooling ermöglichen nicht nur die Automatisierung von Unit-Tests für Web-Frontends sondern vereinfachen auch die Umsetzung von End-to-End Tests und die Integration in Continuous Delivery Ansätze und zugehörige Testkonzepte. Ein kurze Einführung zu dem Thema ist unter http://www.cridon.de/arten-von-end-to-end-tests/ zu finden. Ein mögliches JavaScript Werkzeug zur Durchführung von e2e Tests ist unter https://docs.angularjs.org/guide/e2e-testing zu finden."}, {"radar": "java", "quadrant": 2, "ring": "einsetzen", "name": "Continuous Integration", "kommentare": null, "desc": "Continuous Integration ist ein Begriff aus der Software-Entwicklung, der den Prozess des fortlaufenden Zusammenfügens von Komponenten zu einer Anwendung beschreibt. Das Ziel der kontinuierlichen Integration ist die Steigerung der Softwarequalität. Typische Aktionen sind das Übersetzen und Linken der Anwendungsteile, prinzipiell können aber auch beliebige andere Operationen zur Erzeugung abgeleiteter Informationen durchgeführt werden. Üblicherweise wird dafür nicht nur das Gesamtsystem neu gebaut, sondern es werden auch automatisierte Tests durchgeführt und Softwaremetriken zur Messung der Softwarequalität erstellt. Der gesamte Vorgang wird automatisch ausgelöst durch Einchecken in die Versionsverwaltung. Eine vereinfachte Variante der kontinuierlichen Integration – und häufig ihre Vorstufe – ist der Nightly Build (nächtlicher Erstellungsprozess). In der Praxis trifft man auch auf kontinuierliche Integration, gepaart mit einem Nightly Build, um die Vorteile beider Systeme zu kombinieren. Eine Weiterentwicklung der kontinuierlichen Integration stellt die kontinuierliche Auslieferung (Continuous Delivery) dar. Dabei wird in bestimmten Zeitabständen oder bei Erreichen einer bestimmten Qualitätsmetrik eine neue Version der Software ausgeliefert. Quelle: https://de.wikipedia.org/wiki/Kontinuierliche_Integration"}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "Bitbucket", "kommentare": null, "desc": "Ermöglicht professionelle Softwareentwicklung mit oder ohne Branching-Modelle. Ermöglicht durch Social Coding Features intensive und professionelle Auseinandersetzung mit dem Code im Team."}, {"radar": "java", "quadrant": 2, "ring": "überdenken", "name": "ESB", "kommentare": null, "desc": "Typischerweise sprechen wir hier von kommerziellen Produkte von Oracle oder IBM. Hohe Lizenzkosten, hohe Komplexität und der Widerspruch zu agilen Vorgehensweisen und leichtgewichtigen Architekturen lassen uns ESBs überdenken. Alternativen für typische ESB-Anforderungen bieten Camel, Kafka, RabbitMQ."}, {"radar": "java", "quadrant": 2, "ring": "einsetzen", "name": "Resilient Software Design", "kommentare": null, "desc": "Resilience ist die Fähigkeit eines Systems, mit unerwarteten (Fehler-)Situationen umzugehen, ohne dass der Anwender davon etwas mitbekommt (bester Fall) oder mit einer definierten Herabsetzung der Servicequalität („graceful degradation of service“ im Englischen, schlechtester Fall). Quelle: https://jaxenter.de/unkaputtbar-einfuehrung-resilient-software-design-15119"}, {"radar": "java", "quadrant": 1, "ring": "überdenken", "name": "DB2", "kommentare": null, "desc": "Log-Manager-basiertes, unhandliches System. Sollte nur bei expliziten, nicht vermeidbaren Kundenanforderungen eingesetzt werden. Teuer, komplex, immer seltener."}, {"radar": "java", "quadrant": 2, "ring": "einsetzen", "name": "Agile Entwicklungsprozesse", "desc": "Fördern die Kommunikation zwischen Fachbereich und Entwicklung und unterstützen so die Entwicklung qualitativ hochwertiger, produktionsreifer Software und deren zeitnaher Produktivsetzung. Agile Entwicklungsprozesse sind eine Grundlage von Countinuous Delivery."}, {"radar": "java", "quadrant": 1, "ring": "einsetzen", "name": "MySQL", "kommentare": null, "desc": "MySQL hat sich bei relationalen Datenbanken inzwischen zum echten Konkurrenten entwickelt. Neben einer guten Performance auch bei großen Datenmengen kommt MySQL mit Features aus dem \"NewSQL\"-Umfeld wie Sharding. Oracle DB-Fanboys werden etwas vergleichbares wie den Enterprise-Manager oder andere Enterprise-Features vermissen."}, {"radar": "java", "quadrant": 2, "ring": "überdenken", "name": "JEE Application Server", "kommentare": null, "desc": "Wir empfehlen eine genaue Prüfung und möchten sensibilisieren. JEE Application Server sind kein muß. Die Konfiguration und das Deployment in Application Server ist oft aufwendig. Daher: Application Server sind nicht mehr gesetzt und notwendig (siehe auch leichtgewichtige, verteilte Architekturen), können aber trotzdem eingesetzt werden, wenn beispielsweise besondere App Server Features (z. B. Transaktionsmanager für verteilte Transaktionen) benötigt werden oder der Kunde es unbedingt haben möchte."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "Gradle", "kommentare": null, "desc": "Flexibles, relativ einfach zu erweiterndes Build-Werkzeug. Im Gegensatz zu Maven besitzt Gradle einen imperativen Ansatz so dass die Build-Definitionen als Code vorliegen, welches sich auch z.B. testen lässt. Groovy/Java-Kentnisse sind von Vorteil."}, {"radar": "java", "quadrant": 4, "ring": "einsetzen", "name": "Go", "kommentare": null, "desc": "Go wird von Google entwickelt und ist auch intern bei Google immer mehr im Einsatz. Besonders im Devops-Umfeld ist die Sprache sehr populär (Go Projekte: Docker, Kubernetes, Consul, etc.) aber auch immer mehr größere Firmen und Startups setzen auf Go als 1. Backend-Sprache. Sinnvoll kann Go auch im Microservice-Umfeld eingesetzt werden (niedriger Memory footprint, Single Binary). Der Einstieg in Go gestaltet sich recht einfach und Java / C#-Entwickler finden sich schnell zurecht. Mit JetBrains Gogland steht auch inzwischen eine professionelle Entwicklungsumgebung zur Verfügung, alternativ kann Atom mit Plugins zu einer Go-IDE aufgepeppt werden."}, {"radar": "java", "quadrant": 3, "ring": "evaluieren", "name": "Service-Now", "kommentare": null, "desc": "ITSM Lösung für die Automatisierung von Standardaufgaben. Self-Service Portal."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "SpiraTest", "kommentare": null, "desc": "SpiraTest ist das adesso Standardtool für das Testmanagement falls keine anderweitigen Kundenanforderungen bestehen."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "JIRA", "kommentare": "Architektenzirkel 11/2018: JIRA wird in manchen Projekten als 'sperrig' erlebt, jedoch bleibt die Einschätzung auf 'einsetzen' mangels Alternativen", "desc": "JIRA ist das adesso Standardtool für die Verwaltung von Tickets aus Softwareentwicklungsprojekten, falls keine anderweitigen Kundenanforderungen bestehen. Eine Berechtigung für Kunden kann eingerichtet werden. Neben der Bearbeitung von echten Fehlern können auch Tickets für agile Vorgehensmodelle (Epic, Story) und Anforderungen (Feature, Change Request) verwaltet werden."}, {"radar": "java", "quadrant": 4, "ring": "überdenken", "name": "JSF", "kommentare": null, "desc": "Der komponentenbasierte Web-Entwicklungsansatz, insbesondere mit Java Server Faces, stellt nicht mehr den heute aktuellen Stand der Web-Anwendungsentwicklung dar. Er mischt Client- und Server-Aspekte, die immer wieder zu Herausforderungen, Kopplungen und Komplexität führen. Wir empfehlen den Single Page Ansatz mit Frameworks wie Angular oder ReactJS zu verfolgen wenn komplexe, interaktive Webanwendungen implementiert werden. Für weniger ansprunchsvolle Webanwendungen empfehlen wir leichtgewichtige Lösungen, z.B.  Spring MVC."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "JaCoCo", "kommentare": null, "desc": "Mit JaCoCo kann die Code-Test-Coverage ermittelt werden. JaCoCo verfolgt dabei eine agentenbasierte Instrumentierung, wodurch die Code-Coverage auch für Integrations-Tests auf einfache Weise ermittelt werden kann."}, {"radar": "java", "quadrant": 4, "ring": "überdenken", "name": "Hystrix", "kommentare": "Netflix entwickelt Hystrix nicht mehr weiter und empfiehlt den Einsatz von Alternativen.", "desc": "Hystrix ist eine Resilience-Lösung für Java welches den Circuit Braker Pattern implementiert. Insbesondere bei verteilten Applikationen bzw. Abhängigkeiten zu anderen Systemen sollte Hystrix eingesetzt werden. Hystrix ist auch in Spring Cloud enthalten und wurde von Netflix entwickelt."}, {"radar": "java", "quadrant": 3, "ring": "evaluieren", "name": "Nect", "kommentare": null, "desc": "Identifizierung von Nutzern als Service. Beispielweise als Selfie oder per Foto des Personalausweises."}, {"radar": "java", "quadrant": 1, "ring": "einsetzen", "name": "Nexus", "kommentare": null, "desc": "Nexus wird im Rahmen der adesso Continuous Integration Infrastruktur zur Ablage von Artefakten bereitgestellt und wird in vielen adesso Projekten erfolgreich eingesetzt."}, {"radar": "java", "quadrant": 1, "ring": "überdenken", "name": "Bamboo", "kommentare": null, "desc": "Eine einfache Möglichkeit, CI trotz schwieriger Ausgangslage und Infrastruktur bei Kunden einzusetzen. Allerdings hat Bamboo keinen Support für Pipeline as Code."}, {"radar": "java", "quadrant": 3, "ring": "evaluieren", "name": "leanIX", "kommentare": null, "desc": "Werkzeug für Enterprise Architektur Management."}, {"radar": "java", "quadrant": 3, "ring": "evaluieren", "name": "YouTrack", "kommentare": "Architektenzirkel 11/2018", "desc": "YouTrack ist ein schlankes Issue-Tracking Tool von JetBrains, welches den Fokus auf agile Entwicklung legt. Da die meisten Projekte auf agile Methoden setzen, sollte YouTrack als Alternative für JIRA evaluiert werden."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "jQAssistant", "kommentare": "Architekturzirkel 11/2018", "desc": "jQAssistant ist ein Werkzeug, welches die Architektur einer Anwendung in eine Graphdatenbank importiert und es ermöglicht, darüber Abfragen zu stellen, um die Architektur zu prüfen. Über Plugins kann jQAssistant in den Build integriert werden und einen Build fehlschlagen lassen, wenn gegen eine Architekturregel verstoßen wurde."}, {"radar": "java", "quadrant": 2, "ring": "einsetzen", "name": "Requirements Engineering mit IREB", "kommentare": null, "desc": "Zahlreiche Studien belegen, dass gutes Requirements Engineering ein essenzieller Erfolgsfaktor in der Software-Entwicklung ist. Es legt den Umfang und die Gestalt des Projekts fest und schafft die gemeinsame Kommunikationsbasis für alle am Projekt beteiligten Disziplinen. Wissen über die Grundlagen und Konzepte des Requirements Engineerings ist daher eine Schlüsselkompetenz, die in keinem Entwicklungsprojekt fehlen darf."}, {"radar": "java", "quadrant": 4, "ring": "einsetzen", "name": "CSS 3", "kommentare": null, "desc": "Die Verwendung von CSS 3 wird insbesondere im Zusammenklang mit HTML 5 empfohlen. Die Trennung von Content und Style durch die Verwendung von CSS ist eine \"Best Practice\" der Web-Entwicklung."}, {"radar": "java", "quadrant": 4, "ring": "einsetzen", "name": "CDI ", "kommentare": null, "desc": "Für Projekte die gerne leichtegwichtigere Programmiermodelle und -Umgebungen einsetzen würden als EJB, aber z.B. kein Spring einsetzen dürfen. Aufgrund der wesentlich besseren Testbarkeit und leichgewichtigeren Laufzeitumgebungen (z.B. Tomcat) ist, wenn es JEE sein muss, CDI gegenüber EJB zu bevorzugen."}, {"radar": "java", "quadrant": 4, "ring": "evaluieren", "name": "Rust", "kommentare": null, "desc": "<a href='https://www.rust-lang.org/'>Rust</a> wurde unter dem Aspekt entwickelt, typische Fehler (wie z. B. im Speichermanagement) grundsätzlich schon durch geeignete Sprachkonstrukte zu unterbinden. Die Sprache hebt sich damit von C / C++ ab, erreicht aber nicht den Abstraktionsgrad von Java oder C#, und eignet sich daduch insbesondere für systemnahe Software-Entwicklung. Weitere Aspekte sind: Performance recht hoch, spannender Ansatz zum Memory-Management, Modulsystem, Ownership-System, Traits, mächtige Macros, Enums und Matches (Switches), Alles-ist-eine-Expression, ...</p> Bei Überlegungen zum Einsatz der Sprache sollte berücksichtigt werden, dass sie noch recht jung ist und es dementsprechend nur sehr wenige native Rust-Bibliotheken gibt. Auch deshalb die Einstufung <i>evaluieren</i>.</p> Eine kurze Einordnung der Sprache findet sich bei <a href='http://www.golem.de/news/rust-ist-die-neue-programmiersprache-besser-1606-121227.html'>Golem</a>, ein Vergleich mit Java <a href='https://llogiq.github.io/2016/02/28/java-rust.html'>hier</a>."}, {"radar": "java", "quadrant": 1, "ring": "evaluieren", "name": "Istio", "kommentare": null, "desc": "Istio ist eine Service-Mesh Implementierung für Kubernetes und OpenShift, welche Querschnittsthemen der Plattform wie Sicherheit, API-Management, Resilienz, Monitoring und Topologiedokumentation der Containerplattformen übernimmt. Wichtig ist der Einsatz in komplexerern Microservice-Architekturen. Istio nutzt des Sidecar-Pattern von Kubernetes."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "Postman", "kommentare": null, "desc": "WebRequest-Generator für das Debugging von POST- und GET-Requests. Hohe Relevanz für alle web- und serviceorientierten Projekte, in denen programmatisch WebRequests an entsprechende APIs zum Einsatz kommen. Nicht die Browser-Plugins nutzen!"}, {"radar": "java", "quadrant": 3, "ring": "evaluieren", "name": "iWelcome", "kommentare": null, "desc": "Identity Management as a Service. Authentifizierung wird an einen Dienstleister ausgelagert."}, {"radar": "java", "quadrant": 1, "ring": "evaluieren", "name": "GoCD", "kommentare": null, "desc": "Bereits für interne Spielprojekte eingesetzt und für relevant befunden. Da der Bekanntheitsgrad gering ist und damit auch die Community recht klein ist, wurde GoCD zurückgestuft. Dies bedeutet keinesfalls, dass damit das Thema Continuous Delivery zurückgestuft wird!"}, {"radar": "java", "quadrant": 4, "ring": "überdenken", "name": "Vaadin", "kommentare": null, "desc": "Vaadin implementiert einen Server-zentrierten Ansatz der Web-Anwendungs-Entwicklung. Wir empfehlen für Web-Anwendungsentwicklung heute allerdings  Single-Page-Ansätze und leichtgewichtige serverseitige Ansätze. Zudem wird die Basistechnologie von Vaadin, GWT, nicht mehr von Google supported."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "OWASP Dependency Check", "kommentare": null, "desc": "Das OWASP Dependency Plugin identifiziert die Projektabhängigkeiten und überprüft ob dort bekannte Schwachstellen (Vulnerabilities) vorliegen. Da Sicherheit ein wichtiges Thema in vielen adesso Projekten ist, sollte dies Plugin beachtet werden. Verfügbar für Maven/Gradle/Jenkins."}, {"radar": "java", "quadrant": 2, "ring": "einsetzen", "name": "Webservices", "kommentare": "//TODO: Überarbeiten, verallgemeinern", "desc": "SOAP ist vornehmlich in M2M-Kommunikation eingesetzt und hat eine höhere Verbindlichkeit als z.B. REST. Es ist aber stets zu hinterfragen welche Vorteile man sich von der höheren Verbindlichkeit verspricht und ob dies fachlich wirklich gewollt ist. Empfehlung bei Einsatz von SOAP: Contract first, keine Persistenz von Schnittstellenobjekten (XML, JSON o.ä.)."}, {"radar": "java", "quadrant": 4, "ring": "überdenken", "name": "Wicket", "kommentare": null, "desc": "Wicket ist ein komponentenbasiertes Web-Anwendungs-Entwicklungsframework des Apache Projekts. Die Bewertung <i>überdenken</i> folgt der Argumentation zu Vaadin und JSF."}, {"radar": "java", "quadrant": 3, "ring": "evaluieren", "name": "logFaces", "kommentare": null, "desc": "Komplettlösung für zentrales Logging, einfacher zu verwenden als ELK oder Graylog. Ein Nachteil ist der eclipse-basierte Client statt einer Weboberfläche (manche betrachten dies auch positiv) sowie dass es sich um ein kommerzielles Produkt handelt."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "Sonarqube", "kommentare": null, "desc": "Sonarqube wird im Rahmen der adesso Continuous Integration Infrastruktur bereitgestellt und zeigt die Codequalität in übersichtlichen Dashboards an. Eine Integration in die IDEs (Eclipse, IntelliJ) ist über Plugins möglich. Der Einsatz von Sonarqube hat sich in vielen adesso Projekten bewährt und wird dringend empfohlen."}, {"radar": "java", "quadrant": 4, "ring": "einsetzen", "name": "Apache Camel", "kommentare": null, "desc": "Hat sich in mehreren adesso Projekten als nützlich und robust erwiesen um Integrationsaufgaben zu erledigen. Im Vergleich zu Spring Integration einfacher zu konfigurieren."}, {"radar": "java", "quadrant": 2, "ring": "einsetzen", "name": "Resourcen-orientierte Web-Schnittstellen", "kommentare": null, "desc": "Die Integrationsfähigkeit und Offenheit von Software wird zunehmend wichtiger, RESTful APIs stellen eine hochgradig-interoperable, einfache und verständliche Form der Öffnung und Umsetzung von Schnittstellen dar. Testen z.B. mit rest-assured. REST ist bei der Kommunikation, weniger verbindlich, flexibler, leichtgewichtiger als z.B. SOAP oder RMI. Hinweis: REST spricht konzeptionell in erster Linie Ressourcen an"}, {"radar": "java", "quadrant": 4, "ring": "überdenken", "name": "Swing ", "kommentare": null, "desc": "Swing ist abgekündigt und die aktuelle Alternative ist JavaFX. Daher sollte Swing überdacht werden."}, {"radar": "java", "quadrant": 3, "ring": "evaluieren", "name": "Performance Co-Pilot", "kommentare": null, "desc": "Performance Co-Pilot ist ein interessantes Framework für System-Level Performanz Analysen in verteilten Unix-Umgebungen."}, {"radar": "java", "quadrant": 3, "ring": "überdenken", "name": "Java Melody", "kommentare": null, "desc": "Java Melody wird in einigen adesso Projekten für eine einfaches und kostengünstiges Monitoring von Java und JavaEE Applikationsservern eingesetzt. Allerdings sollte der Einsatz überdacht werden da zusätzliche Informationen freigegeben der JVM werden - der Zugriff sollte in einem produktiven Umfeld restriktiv eingeschränkt werden. Spring Actuator und Spring Boot Admin sind alternative Lösungen, die wir präferieren."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "JMeter", "kommentare": null, "desc": "JMeter ist der Quasi-Standard wenn es um Performance-Tests von Webapplikationen geht. Daneben können mit JMeter auch z.B. Messaging-Systeme (JMS), Datenbanken (JDBC) oder auch Webservices bzw. REST-Schnittstellen getestet werden. Klarer Nachteil ist der deklarative Ansatz und der hohe Pflegeaufwand. Eine Alternative stellt Gatling dar."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "Chef / Puppet / Ansible", "kommentare": null, "desc": "Chef oder alternativ Puppet/Ansible sind Systemkonfigurationswerkzeuge für die Provisionierung von hauptsächlich Unix basierten Systemen. Speziell im Rahmen von Projekten mit DevOps Anteilen sind dies interessante Kandidaten. Verbreitete und notwendige Lösungen, die etabliert und sich in Projekten bewährt haben."}, {"radar": "java", "quadrant": 1, "ring": "einsetzen", "name": "VMware ESX Server", "kommentare": null, "desc": "Erprobte, zuverlässige Lösung für den Betrieb von virtualisierten Umgebungen.  Bei vielen Kunden und auch bei adesso erfolgreich im Einsatz."}, {"radar": "java", "quadrant": 1, "ring": "einsetzen", "name": "Docker", "kommentare": null, "desc": "Docker dient dem effizienten Aufbau von Umgebungen (vom Entwicklungsrechner bis zur Produktivumgebung),  und funktioniert bereits in mehreren unserer Projekte."}, {"radar": "java", "quadrant": 4, "ring": "einsetzen", "name": "HTML 5", "kommentare": null, "desc": "HTML5 erschließt mit seiner Vielfalt an neuen Web-Techniken Einsatzbereiche, die früher eher mittels Adobe Flash bedient wurden. Zu beachten bleibt aber, das HTML5 ein lebender Standard ist und leider nicht alle Features von allen Browsern unterstützt werden."}, {"radar": "java", "quadrant": 4, "ring": "einsetzen", "name": "Spring Boot", "kommentare": null, "desc": "Spring Boot bietet eine einfache Möglichkeit schnell stand-alone Anwendungen mit Produktionsreife zu schreiben und wird bereits in einigen Kundenprojekten erfolgreich eingesetzt."}, {"radar": "java", "quadrant": 3, "ring": "evaluieren", "name": "UpSource", "kommentare": "Architektenzirkel 11/2018", "desc": "UpSource ist ein Code-Review-Tool von JetBrains, welches neben Git auch SVN unterstützt und sich sehr gut in IntelliJ integrieren lässt. Da IntelliJ weiter Verbreitung findet, sollte UpSource als Code-Review-Took evaluiert werden."}, {"radar": "java", "quadrant": 2, "ring": "einsetzen", "name": "Versionkontrolle für Datenbanken", "kommentare": null, "desc": "Da Code und Datenbank-Struktur zusammenpassen müssen, ist es zwingend notwendig, die DB-Struktur mit in der Versions-Kontrolle zu sichern. Hierzu können Produkte wie z. B. mittels Flyway oder Liquibase eingesetzt werden. Vorsicht: Nicht nur DB neu aufsetzen, sondern auch den jeweiligen Migrationspfad immer testen."}, {"radar": "java", "quadrant": 4, "ring": "einsetzen", "name": "Spring MVC", "kommentare": "aa", "desc": "Bei SpringMVC handelt es sich um eine Action basiertes Webframework, das den State auf den Server hält. Es ist sowohl zur Umsetzung von REST basierten Services als auch der Entwicklung von klassischen Request/Response orientierten Webanwendungen geeignet. In Kombination mit dem serverseitigen Templating Framework Thymeleaf ist eine modulare Umsetzung des UI möglich. Da SpringMVC zum Spring Ökosystem gehört ist es damit bestens geeignet um auch das UI für anspruchsvolles Enterprise Anwendungen umzusetzen. Das Programmiermodell selbst kommt einem klassischen Java Entwickler entgegen und hat damit, betrachtet man die gängigen Web Frameworks, die geringste Einstiegsbarriere."}, {"radar": "java", "quadrant": 4, "ring": "überdenken", "name": "Scala", "kommentare": null, "desc": "Die Weiterentwicklung von Java, insbesondere von neuen funktionalen Sprachkonstrukten in Java 8, auch neue Sprachen wie Groovy, mindert die Notwendigkeit Scala zu nutzen. Siehe auch den <a href='http://www.tiobe.com/tiobe-index/'>Tiobe Index</a> zu der Verbreitung von Programmiersprachen. Gleichzeitig beobachten wir eine abschwächende Community-Beteiligung an Scala. Für die Nutzung von Apache Spark ist Scala allerdings weiterhin neben Pyhton eine Sprache der Wahl."}, {"radar": "java", "quadrant": 2, "ring": "einsetzen", "name": "Continuous Delivery", "kommentare": null, "desc": "Continuous Delivery (CD) bezeichnet eine Sammlung von Techniken, Prozessen und Werkzeugen, die den Softwareauslieferungsprozess (englisch: Deployment) verbessern. Techniken wie Continuous Integration (CI), Testautomatisierung und kontinuierliche Installation erlauben in Kombination mit agilen Methoden die Entwicklung qualitativ hochwertiger Software. Software-Build-Jobs auf CI-Servern wie Jenkins ermöglichen ein automatisiertes Testen und Erstellen von „Nightly“- oder „Release“-Versionen. Diese Versionen können mit Hilfe von CD automatisiert auf Entwicklungs-, Test-, Integrations- und Produktivumgebung eingespielt werden. Die Automatisierung der Integrations- und Auslieferungsprozesse ermöglicht schnelle, zuverlässige und wiederholbare Deployments. Erweiterungen oder Fehlerkorrekturen können somit mit geringem Risiko und niedrigem manuellem Aufwand in die Produktivumgebung oder zum Kunden ausgeliefert werden. Continuous Delivery wird primär in Kombination mit agilen Methoden eingesetzt. Für eine Einführung von Continuous Delivery wird häufig eine Umsetzung des DevOps-Ansatzes empfohlen. Quelle: https://de.wikipedia.org/wiki/Continuous_Delivery"}, {"radar": "java", "quadrant": 2, "ring": "einsetzen", "name": "Responsive Design", "kommentare": null, "desc": "Responsive Webdesign stellt eine aktuelle Technik zur Verfügung, welche es ermöglicht mit Hilfe von HTML5 und CSS3 Media-Queries das einheitliche Anzeigen von Inhalten auf einer Website zu gewährleisten. Hierbei wird das Layout einer Website so flexibel gestaltet, dass dieses auf dem Computer- Desktop, Tablet und Smartphone eine gleichbleibende Benutzerfreundlichkeit bietet und der Inhalt gänzlich und schnell vom Besucher aufgenommen werden kann. Quelle: http://www.responsive-webdesign.mobi/was-ist-responsive-webdesign/"}, {"radar": "java", "quadrant": 2, "ring": "überdenken", "name": "SAFe", "kommentare": null, "desc": "SAFe ist aus unserer Erfahrung bei der Einführung agiler Methoden sehr zwiespältig zu betrachten. adesso als Dienstleister muss SAFe momentan aber im Portfolio haben um an verschiedenen Stellen mitsprechen zu können. Wie das generell mit Methoden so ist, kommt es auf den Kontext an; hier eben die agile Reife des Unternehmens und mit der Einführung von Agilität Gewinnerwartungen. Mit nur einem Hammer in der Hand wird jedes Problem zum Nagel, das sollten wir vermeiden. Neben SAFe gibt es weitere Best-Practices wie LeSS, Scaled Scrum, Spotify etc. die wir auch alle kennen sollten. Wahr ist aber auch, je höher der agile Reifegrad um so schlechter passt SAFe."}, {"radar": "java", "quadrant": 4, "ring": "evaluieren", "name": "Kotlin", "kommentare": null, "desc": null}, {"radar": "java", "quadrant": 4, "ring": "einsetzen", "name": "Spring Cloud", "kommentare": null, "desc": "Spring Cloud beinhaltet verschiedenste Sub-Projekte um effizient (nicht nur) verteilte, cloud-basierte Applikationen zu implementieren. Spring Cloud unterstützt bei der Umsetzung resilienter Architekturen (s. Hystrix), vereinfacht das Deployment und den Einsatz typischer Komponenten für verteilte Softwarearchitekturen wie eine Service Registry, Service Routing, API Gateways, Monitoring und mehr. Spring Cloud beinhaltet dafür einige Komponenten des Netflix-Stacks."}, {"radar": "java", "quadrant": 2, "ring": "evaluieren", "name": "Progressive Web Apps (PWA)", "kommentare": null, "desc": "Progressive Web Apps (PWA) kombinieren die Vorteile des Webs mit den Vorteilen nativer Anwendungen. Das bedeutet, dass sie einerseits wie klassische Web-Anwendungen ohne Installation auf jeder Plattform funktionieren und andererseits wie ihre nativen Gegenstücke selbst bei einer schlechten oder fehlenden Datenverbindung blitzschnell Nutzen bieten.  <a href=\"https://jaxenter.de/top10-jaxenter-interviews-51318\">Quelle</a>. Alternative Ansätze existieren momentan nicht, auch wenn der Ansatz neu ist, so ist er einer eigenentwickelten Lösung vorzuziehen. Aktuell existieren noch keine Erfahrungen aus Projekten, daher <emph>evaluieren</emph>."}, {"radar": "java", "quadrant": 4, "ring": "überdenken", "name": "Groovy", "kommentare": null, "desc": "Es gibt Kontexte, in denen Groovy zwingend oder optional gebraucht wird wie z.B. Gradle, ForgeRock oder Camel. Hier kann/soll Groovy natürlich eingesetzt werden. Für die generelle Softwareentwicklung gibt es aber mittlerweile Alternativen, die ein größeres Momentum haben, wie z.B. Kotlin."}, {"radar": "java", "quadrant": 4, "ring": "einsetzen", "name": "Hibernate", "kommentare": null, "desc": "Im Bereich der OR Mapper ist Hibernate weiterhin das Mittel der Wahl. Alternativen wie EclipseLink bieten hier keine Vorteile oder sind gar schlechter. Zu überlegen bleibt aber, ob es immer ein schwergewichtiger OR-Mapper sein muss oder ob nicht manchmal eine schlankere Lösung wie z. B. MyBatis zu bevorzugen ist."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "Rest-assured", "kommentare": null, "desc": "REST-assured kommt mit dem Versprechen, das Testen von REST-Schnittstellen auch in Java so einfach wie möglich zu gestalten. Hierzu bietet es eine Fluent-API die in der Tat gelungen ist."}, {"radar": "java", "quadrant": 1, "ring": "einsetzen", "name": "Hadoop", "kommentare": null, "desc": "Hadoop ist eine Plattform für verschiedenste Datenverarbeitungsaufgaben, die hohe Anforderungen an Skalierbarkeit, Verfügbarkeit und die Implementierung komplexer Verarbeitungsschritte und Analysen unterstützt. Hadoop umfasst dabei eine Menge unterschiedlicher Komponenten, von denen viele auch einzeln genutzt werden können. Darunter Infrastruktur-Management-Komponenten, Werkzeuge für die Datenbewirtschaftung, Datenbanken, Implementierungen verteilter Dateisysteme und mehr. In einigen Projekten hat sich der Hadoop-Stack bereits bewährt und ist bei immer mehr Kunden im Gespräch oder bereits im Einsatz."}, {"radar": "java", "quadrant": 4, "ring": "evaluieren", "name": "resilience4j", "kommentare": "Netflix empfiehlt resilience4j als Alternative zu Hystrix.", "desc": "Resilience4j ist eine leichtgewichtige Resilience-Bibliothek, die Java 8 Features und functionale Programmierung unterstützt. Sie hat wenige Abhängigkeiten zu anderen Biblitheken und bietet einen modularen Aufbau."}, {"radar": "java", "quadrant": 4, "ring": "überdenken", "name": "Lucene", "kommentare": null, "desc": "Lucene ist ein Bestandteil von Solr und Elasticsearch. Diese sollten als dedizierte Plattformen Lucene vorgezogen werden, da sie umfangreiche Werkzeug-Unterstützung und häufig benötigte Zusatzfunktionalität mitbringen."}, {"radar": "java", "quadrant": 1, "ring": "einsetzen", "name": "PostgreSQL", "kommentare": null, "desc": "//TODO: überarbeiten, hinsichtlich positiver Erfahrung und Einsetzbarkeit. Eher für kleine bis mittlerer Datenmengen geeignet. Bei der AMS wurden eher negative Projekt-Erfahrungen gesammelt. PostgreSQL hat sich in FirstSpirit-Projekten  für die Nutzung von Tabellen mit vielen Spalten bewährt um Mehrsprachigkeit zu unterstützen."}, {"radar": "java", "quadrant": 1, "ring": "überdenken", "name": "Solr", "kommentare": null, "desc": "Ist im Vergleich zum Elastic Stack wesentlich komplexer hinsichtlich Setup und Betrieb, aber dennoch eine etablierte Plattform für die Abbildung von Fulltext-Search-Anforderungen."}, {"radar": "java", "quadrant": 2, "ring": "einsetzen", "name": "Leichtgewichtige Architekturen", "kommentare": null, "desc": "Software kann immer häufiger ohne große und umfangreiche Application-Server oder Rahmentechnologien betrieben werden. Leichtgewichtige Architekturen verbinden wir mit weniger kostspieligem Overhead, Flexibilität bzgl. Schnittstellen und vereinfachter Delivery. Für die Umsetzung bieten sich RESTful Schnittstellen, Docker, Spring Boot und ggf. der Spring Cloud Stack an."}, {"radar": "java", "quadrant": 4, "ring": "evaluieren", "name": "Failsafe", "kommentare": null, "desc": "Alternative zu Hystrix"}, {"radar": "java", "quadrant": 1, "ring": "einsetzen", "name": "MariaDB", "kommentare": null, "desc": "MariaDB ist ein Fork von MySQL mit einer sehr liberalen Lizenz (GPLv2), die es auf üblichen aktuellen Linux-Distributionen quasi out-of-the-box nutzbar macht. Für die ALSO (Großhandel) haben wir einen B2B-Hateoas-Service gebaut und betreiben ihn seitdem, er läuft mit einer MariaDB. Auch bei der Swisscom gibt es positive Erfahrungen mit MariaDB 10.x inkl. Galera. Gerade für \"gewöhnliche\" Architekturen und Persistenzanforderungen halten wir MariaDB daher für einsetzenswert. Weitere Details zu MariaDB enthält <a href=\"https://www.yammer.com/adesso-group.com/#/Threads/show?threadId=860368968\">die Diskussion in Yammer</a>."}, {"radar": "java", "quadrant": 4, "ring": "überdenken", "name": "JavaFX", "kommentare": null, "desc": "JavaFX ist der offizielle Nachfolger von Java Swing für die Implementierung nativer Desktop-Applikation. Derartige Software entwickeln wir immer seltener, wo dies gefordert wird ist JavaFX jedoch ein zu betrachtender Lösungsbaustein."}, {"radar": "java", "quadrant": 2, "ring": "evaluieren", "name": "Microservices auf Basis JEE", "kommentare": "JEE Application Server stehen auf überdenken. Das ist kein Gegensatz, da der Anwendungskontext der AplicationServer hier ein anderer ist.", "desc": "Microservices auf Basis von 'MicroProfile.io' zusammen mit dem IBM OpenLiberty oder alternativ dem Wildfly und Galleonin können eine vollwertige Alternative zum bekannten Spring-Stack sein. Die Microprofiles beinhalten offene Standards/Frameworks für Microservices und die genannten Server können (angeblich) in einem Production-Build kleiner werden, als ein vergleichbares Uber-Jar."}, {"radar": "java", "quadrant": 3, "ring": "einsetzen", "name": "IntelliJ IDEA / WebStorm", "kommentare": null, "desc": "Die Entwicklungsumgebungen von JetBrains bieten eine sehr gute Unterstützung sowohl für Java als auch für JavaScript. Insbesondere bei Projekten mit hohen JavaScript Anteilen wird IntelliJ IDEA oder WebStorm gegenüber Eclipse empfohlen."}, {"radar": "java", "quadrant": 1, "ring": "einsetzen", "name": "Jenkins", "kommentare": null, "desc": "Ist <strong>die</strong> verbreitete CI Plattform. Auch wenn der Einsatz von Jenkins empfohlen wird, weisen wir darauf hin, dass Jenkins teilweise aufwändig zu handhaben und häufig fehlerbehaftet ist. Der Atlassian-Stack und Gitlab bieten alternative CI-Plattformen, die betrachtet werden können."}, {"radar": "java", "quadrant": 4, "ring": "evaluieren", "name": "Spring Integration", "kommentare": null, "desc": "Spring Integration bietet analog zu Apache Camel eine Vielzahl von Enterprise Integration Pattern und Konnektoren und stellt eine Alternative zu Apache Camel dar wenn es um die Integration von Systemen. Insbesondere wenn man auf Basis des Spring Stacks entwickelt. Apache Camel bietet zwar ebenfalls eine Spring Integration an, diese ist jedoch gefühlt nicht so nahtlos. Spring Integration kann also überall dort eine Alternative zu Apache Camel sein wo man durchgängig auf den Springstack setzt.."}]
