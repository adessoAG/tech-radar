[{"radar": "javascript", "quadrant": 3, "ring": "einsetzen", "name": "Webpack", "kommentare": null, "desc": "Webpack ist ein Module Bundler für JavaScript Projekte. Es unterstützt mehrere Modulformat, verfügt über Tree-Shaking Features und ist in der Angular- und React-Community das Standard Tool um aus Modulen effiziente Bundles zu erzeugen."}, {"radar": "javascript", "quadrant": 4, "ring": "einsetzen", "name": "ReactJS", "kommentare": null, "desc": "ReactJS hat sich als weiterer großer Player für die Entwicklung von Web-Anwendungen etabliert. Im Vergleich zu Angular ist React weniger umfangreich, eher als Bibliothek zu werten, und bedarf ggf. der Integration weiterer Bibliotheken für typische Anforderungen in Projekten. Dadurch ist es jedoch leichtgewichtiger und eröffnet höhere Freiheitsgrade."}, {"radar": "javascript", "quadrant": 2, "ring": "einsetzen", "name": "Offline-First", "kommentare": "auf einsetzen geändert", "desc": "Das Frontend wird erst für den Offline-Fall entwickelt und dann um Online-Features erweitert."}, {"radar": "javascript", "quadrant": 3, "ring": "einsetzen", "name": "Karma", "kommentare": null, "desc": "Karma epfehlen wir als Testumgebung für JavaScript Anwendungen. Karma hat einen vergleichbaren Stellenwert wie JUnit in der Java-Welt. Die Tests können in dem jeweiligen Zielbrowser ausgeführt werden."}, {"radar": "javascript", "quadrant": 2, "ring": "einsetzen", "name": "Progressive Web Apps", "kommentare": "auf einsetzen geändert", "desc": "TODO"}, {"radar": "javascript", "quadrant": 2, "ring": "einsetzen", "name": "TDD/BDD", "desc": "TODO"}, {"radar": "javascript", "quadrant": 2, "ring": "einsetzen", "name": "Web Components", "kommentare": "neu", "desc": "TODO"}, {"radar": "javascript", "quadrant": 3, "ring": "einsetzen", "name": "ESLint", "kommentare": null, "desc": "Linter für JavaScript. ES2015 wird unterstützt. Wenn kein TypeScript eingesetzt wird, sollte ESLint verwendet werden"}, {"radar": "javascript", "quadrant": 3, "ring": "überdenken", "name": "Gulp", "kommentare": null, "desc": "GULP ist wie GRUNT ein Build-Werkzeug für JavaScript-Projekte. Gulp ist schneller als GRUNT, aber nicht so schnell und mächtig wie WebPack und daher mittlerweile auch auf dem Rückzug."}, {"radar": "javascript", "quadrant": 2, "ring": "einsetzen", "name": "API-First", "kommentare": null, "desc": "Die Schnittstelle wird designed, bevor die Client und Server entwickelt werden."}, {"radar": "javascript", "quadrant": 4, "ring": "evaluieren", "name": "ECMAScript NEXT", "kommentare": "neu", "desc": "TODO"}, {"radar": "javascript", "quadrant": 3, "ring": "evaluieren", "name": "Compodoc", "kommentare": "neu", "desc": "TODO"}, {"radar": "javascript", "quadrant": 3, "ring": "einsetzen", "name": "NPM", "kommentare": null, "desc": "Der Node Package Manager (npm) ist ein Paketmanager für die JavaScript-Laufzeitumgebung node.js mit einer großen Community und mittlerweile auch für Frontendspezifische Pakete etabliert."}, {"radar": "javascript", "quadrant": 2, "ring": "einsetzen", "name": "Web-basierte Desktop-Apps", "kommentare": null, "desc": "Electron"}, {"radar": "javascript", "quadrant": 3, "ring": "einsetzen", "name": "Jest", "kommentare": null, "desc": "Test Runner von Facebook, der vorwiegend in React Projekten eingesetzt wird. Ermöglicht die einfache Entwicklung von Snapshot Tests, die Zeit beim Schreiben von Tests für reine Rendering-Components einsparen können."}, {"radar": "javascript", "quadrant": 2, "ring": "einsetzen", "name": "State Management Library", "kommentare": "umbenannt", "desc": "(z.B. Redux)"}, {"radar": "javascript", "quadrant": 3, "ring": "einsetzen", "name": "Babel", "kommentare": null, "desc": null}, {"radar": "javascript", "quadrant": 4, "ring": "überdenken", "name": "Aurelia", "desc": "Aurelia ist kein prinzipiell schlechtes Framework, <a href='https://www.yammer.com/adesso-group.com/#/Threads/show?threadId=863318348'>auf Yammer haben wir dies näher diskutiert</a>. Wir bewerten es aus folgenden Gründen jedoch als überdenkenswert: Aurelia hat große konzeptuelle Überschneidungen mit Angular 2, teilweise sogar gleiche Klassen. Aurelia wurde von einem der vormaligen Angular 2 Entwicklern entwickelt. Das 'Ökosystem' (3rd Party Libs, Blog Artikel, Konferenzen) ist im Vergleich zu Angular/React klein - man findet wenig große Community Projekte. Das Unternehmen hinter Aurelia ist klein, verglichen mit Google oder Facebook - bei Kunden häufig ein wichtiges Argument. Facebook und Google setzen ihre Frameworks/Libraries sehr stark intern ein (Googles wichtigste Produkte sind mittlerweile damit umgesetzt und Facebook.com/Instagram setzt React ein)."}, {"radar": "javascript", "quadrant": 2, "ring": "einsetzen", "name": "Toolgestützte Komponenten-Dokumentation", "kommentare": "neu", "desc": "Z.B. storybook"}, {"radar": "javascript", "quadrant": 4, "ring": "einsetzen", "name": "ECMAScript 6", "kommentare": "Umbenannt zu ES6", "desc": "TODO"}, {"radar": "javascript", "quadrant": 2, "ring": "einsetzen", "name": "Komponenten-Architektur", "kommentare": "auf einsetzen geändert", "desc": "TODO"}, {"radar": "javascript", "quadrant": 3, "ring": "überdenken", "name": "Grunt", "kommentare": null, "desc": "GRUNT ist, wie GULP, ein Build-System für JavaScript Anwendungen.  Grunt ist einfacher in der Handhabung, allerdings weniger geeignet für programmatische Anteile von Build-Aufgaben. Außerdem ist GRUNT deutlich langsamer als die Alternativen."}, {"radar": "javascript", "quadrant": 3, "ring": "einsetzen", "name": "Yarn", "kommentare": null, "desc": "Ein alternative Package Manager für das NPM Registry. Yarn ist Open Source und wird von Google und Facebook entwickelt. Vorteile gegenüber dem NPM Package Manager: Enorm schnellere Package Downloads, Deterministische Downloads (Lockfile), gute Offlinefähigkeit, Retry-mechanismus bei Package Downloads (gut für CI Umgebungen - weniger rote Builds durch Download Fehler)"}, {"radar": "javascript", "quadrant": 3, "ring": "einsetzen", "name": "storybook", "kommentare": "neu", "desc": "TODO"}, {"radar": "javascript", "quadrant": 2, "ring": "evaluieren", "name": "Web-Anwendung als reaktives System", "kommentare": null, "desc": "Passende Technologien: ReactJS, RxJS, Redux, NgRx"}, {"radar": "javascript", "quadrant": 3, "ring": "überdenken", "name": "Bower", "kommentare": null, "desc": "Package Manager für Java Script Anwendungen erlauben die Verwaltung der Abhängigkeiten. NPM hat sich auch als Paketmanager für die frontendspezifischen Pakete durchgesetzt. Daher ist aus unserer Sicht die Nutzung eines weiteren Werkzeugs nicht mehr notwendig."}, {"radar": "javascript", "quadrant": 2, "ring": "evaluieren", "name": "Resource-oriented Client Architecture (ROCA)", "kommentare": null, "desc": "Statische Web-Seiten sind zu behäbig, allerdings sind Single-Page-Applications (SPA) nicht immer die richtige Wahl. Bei ROCAs wird der dynamische HTML Content serverseitig generiert. Das führt zu einem schlankeren Web-Client. Je nach Anforderungen kann auch ein Hybrid aus ROCA und mehreren SPAs die richtige Wahl sein."}, {"radar": "javascript", "quadrant": 3, "ring": "überdenken", "name": "Yeoman", "kommentare": null, "desc": "Die großen Frameworks bieten mittlerweile alle eigene Command Line Interfaces für das Scaffolding und für weitere Funktionen. Auch IDEs wie z.B. IntelliJ bieten integrierte Lösungen. Der Einsatz eines weiteren Tools, dass nur initial für das Aufsetzen eines Projektes benötigt wird, sollte also hinterfragt werden."}, {"radar": "javascript", "quadrant": 4, "ring": "einsetzen", "name": "RxJS", "kommentare": null, "desc": "Reactive Programming Library für JavaScript. RxJS implementiert das Observable Pattern und bietet viele nützliche Funktionen um mit asynchronen Events und Daten umzugehen. Die Library ist eine Dependency von Angular und wird daher automatisch in jedem Angular 2+ Projekt eingesetzt. Es wird empfohlen die Version 5.x einzusetzen. RxJS 5 ist mit TypeScript entwickelt und harmoniert daher sehr gut mit TypeScript Projekten."}, {"radar": "javascript", "quadrant": 4, "ring": "evaluieren", "name": "Pact", "kommentare": "neu", "desc": "TODO"}, {"radar": "javascript", "quadrant": 1, "ring": "evaluieren", "name": "ReactNative", "kommentare": "neu", "desc": "TODO"}, {"radar": "javascript", "quadrant": 3, "ring": "einsetzen", "name": "Protractor", "kommentare": null, "desc": "Protractor ist Tool für die Entwicklung von E2E Tests im Angular Umfeld. Es ist ein Aufsatz auf Selenium und die Tests werden mit Hilfe von Jasmine entwickelt. Protractor kann bei der Ausführung der Tests den Zustand der Angular Anwendung erkennen um zu wissen, wann die Tests ausgeführt werden können und die Seite vollständig aufgebaut ist. Dies ist ein großer Vorteil im Vergleich zu einem reinen Selenium-Einsatz."}, {"radar": "javascript", "quadrant": 1, "ring": "evaluieren", "name": "NativeScript", "kommentare": null, "desc": "NativeScript ermöglicht die Entwicklung von nativen Mobile Apps für Android und iOS mit Hilfe von Angular und TypeScript. Die GUI Elemente werden nativ gerendert und entsprechen nicht dem hybriden Ansatz (HTML/CSS) von bsp. Apache Cordova."}, {"radar": "javascript", "quadrant": 4, "ring": "einsetzen", "name": "Jasmine", "kommentare": null, "desc": "Jasmine ist ein Behavior-Driven JavaScript Test Framework, das in der JavaScript/TypeScript Welt sehr populär ist. In der Angular Community ist es das Standard Framework und es ist sehr gut mit Karma kombinierbar."}, {"radar": "javascript", "quadrant": 4, "ring": "einsetzen", "name": "JavaScript", "kommentare": null, "desc": "Für SPAs sollte JavaScript zusammen mit einem der verbreiteten Frameworks wie Angular oder ReactJS eingesetzt werden. Sollte der Einsatz eines dieser Frameworks nicht möglich sein, empfiehlt sich der Einsatz von Babel, um TypeScript oder modernes JavaScript gemäß des aktuellen ECMAScript-Standards einsetzen zu können."}, {"radar": "javascript", "quadrant": 4, "ring": "überdenken", "name": "AngularJS", "kommentare": null, "desc": "Mit der Fertigstellung von Angular 2 sollte AngularJS nicht mehr eingesetzt werden, da eine spätere Migration zu Angular sehr aufwändig ist. Der Fokus der Community und Weiterentwicklung liegt klar auf Angular. Zusätzlich implementiert Angular zusätzliche aus unserer Sicht sinnvolle Eigenschaften, die auch der Projektumsetzung helfen."}, {"radar": "javascript", "quadrant": 3, "ring": "einsetzen", "name": "TSLint", "kommentare": null, "desc": "TSLint ist ein Linter für Typescript und stellt aktuell den \"Quasi Standard\" für TypeScript und Angular Projekte dar."}, {"radar": "javascript", "quadrant": 2, "ring": "einsetzen", "name": "Micro Frontends", "kommentare": "Neu", "desc": "TODO"}, {"radar": "javascript", "quadrant": 3, "ring": "einsetzen", "name": "Prettier", "kommentare": "neu", "desc": "TODO"}, {"radar": "javascript", "quadrant": 4, "ring": "einsetzen", "name": "Angular", "kommentare": null, "desc": "Die Folgeversion von Angular JS stellt den Quasi-Standard für die Implementierung von komplexen Single Page Applikationen dar. Der erfolgreiche Einsatz von Angular (JS) in adesso-Projekten empfiehlt auch die weitere Verwendung diese Frameworks. Wenn es weniger Anforderungen an eine vollumfängliche Framework-Unterstützung gibt, dann ist auch ReactJS eine relevante Alternative."}, {"radar": "javascript", "quadrant": 2, "ring": "einsetzen", "name": "Responsive Web Design", "kommentare": null, "desc": "TODO"}, {"radar": "javascript", "quadrant": 1, "ring": "einsetzen", "name": "Electron", "kommentare": null, "desc": "Electron (ehemals Atom Shell) ist ein von GitHub entwickeltes, quelloffenes Framework. Es ermöglicht die Entwicklung von grafischen Desktop-Applikationen mithilfe des Node.js-Frameworks, das ursprünglich für die Entwicklung von Webanwendungen eingesetzt wurde. Electron ist die Basis zweier bekannter freier Quellcode-Editoren: Atom und Visual Studio Code. In Kombination mit der großen Marktdurchdringung von JavaScript/TypeScript und Node.js kann Electron innerhalb des JavaScript-Stacks eine hohe Bedeutung für Desktop-Applikationen im Projektkontext entwickeln."}, {"radar": "javascript", "quadrant": 4, "ring": "evaluieren", "name": "Vue.js", "kommentare": null, "desc": "Grundsätzlich ist Vue aus architektonischer Sicht nah an React und Angular. Vue spielt seine Stärke vor allem aus wenn ein Team das eher Jquery und ähnliche Ansätze gewohnt ist, damit beginnt mit einem Framework zu arbeiten. Für die Integrationsfähigkeit in bereits bestehende Webanwendungen ist Vue zugänglicher als Angular und React. Der kleine Footprint des Frameworks macht sich dabei ebenfalls bezahlt. Das Ökosystem ist im Vergleich zwar noch kleiner, aber wächst rasant mit einer aktiven Community. Die Unabhängigkeit von den großen Konzernen kann ebenfalls ein Vorteil für ein Projekt sein. Ein Wechsel zu Vue ist nicht unbedingt nötig. Angular und vor allem React Entwickler sollten sich relativ schnell einarbeiten können."}, {"radar": "javascript", "quadrant": 2, "ring": "einsetzen", "name": "Consumer-driven Contracts", "kommentare": "neu", "desc": "(z.B. Pact) TODO"}, {"radar": "javascript", "quadrant": 3, "ring": "einsetzen", "name": "Angular CLI", "kommentare": null, "desc": "Das Angular Command-Line-Interface unterstützt beim Aufsetzen von neuen Angular-Projekten, bei der Erstellung von Components, Services, Pipes und Modules, und es ist außerdem ein Wrapper für WebPack und Karma und liefert einen Development-Server. Durch den Einsatz von Angular CLI bekommt man eine fertige Konfiguration für den Build-Prozess, die Test-Ausführung und einen Entwickler-Modus mit Auto-Reload. Das erspart viel Zeit und Pflege-Aufwand beim Aufsetzen und Konfigurieren der Tool-Chain. Aktuell wird die Angular-Dokumentation auf \"CLI-First\" umgestellt. Daher kann der Einsatz von Angular CLI jetzt als der Standard für Angular-Projekt angesehen werden."}, {"radar": "javascript", "quadrant": 4, "ring": "einsetzen", "name": "TypeScript", "kommentare": null, "desc": "TypeScript fügt im Projektkontext nützliche Sprachfeatures wie Modularisierung, Objektorientierung und statische Typisierung ein, die dabei helfen Code zu strukturieren, Fehler früh zu erkennen und Refactorings günstig umzusetzen. Über Transpiler und automatisch erstellte Mappings wird auch das Debugging von TypeScript unterstützt und die Anforderungen an Browser für die Ausführung beschränken sich auf JavaScript-Unterstützung."}, {"radar": "javascript", "quadrant": 4, "ring": "überdenken", "name": "Ember", "kommentare": "neu", "desc": "TODO"}, {"radar": "javascript", "quadrant": 4, "ring": "einsetzen", "name": "Lodash", "kommentare": null, "desc": "Lodash ist eine Utility Library für JavaScript die aber auch mit TypeScript gut verwendet werden kann.  Lodash stellt nützliche Utility Methoden bereit, die im JavaScript Standard nicht enthalten sind. Die Library ist eines der beliebtesten Packages im NPM Registry (40 Mio Downloads pro Monat) und hat sich in vielen Projekten als sehr nützlich erwiesen."}, {"radar": "javascript", "quadrant": 2, "ring": "einsetzen", "name": "Mobile First", "kommentare": "auf einsetzen geändert", "desc": "TODO"}, {"radar": "javascript", "quadrant": 3, "ring": "evaluieren", "name": "Graph QL", "kommentare": "neu", "desc": "TODO"}, {"radar": "javascript", "quadrant": 3, "ring": "einsetzen", "name": "SASS", "kommentare": "neu", "desc": "TODO"}, {"radar": "javascript", "quadrant": 2, "ring": "einsetzen", "name": "Single-Page Applications", "kommentare": null, "desc": "Im Gegensatz zu klassichen HTML-Seiten führt die Navigation, das Anklicken von Links, das Abschicken von Formularen usw. zu keinen Page-Reload. Stattdessen wird nur eine einzige HTML-Seite geladen. Daten werden asynschron per XHR/Ajax nachgeladen und JavaScript übernimmt die View-Änderungen."}, {"radar": "javascript", "quadrant": 2, "ring": "evaluieren", "name": "Redux", "kommentare": null, "desc": "TODO"}, {"radar": "javascript", "quadrant": 2, "ring": "evaluieren", "name": "No-Backend", "kommentare": null, "desc": "Entwicklung des Frontends gegen ein Mock-Backend"}, {"radar": "javascript", "quadrant": 1, "ring": "einsetzen", "name": "NodeJS - Server-Side-JavaScript", "kommentare": null, "desc": "JavaScript gewinnt zunehmend an Verbreitung, auch im Enterprise-Kontext und bei der serverseitigen Programmierung. Die Nutzung der selben Sprache über Web-Frontend und Server verspricht grundsätzliche Effizienzgewinne. Die Integration in die JVM, z.B. durch Nashorn, bietet einen Migrationspfad und die Möglichkeit die reichhaltige Java-Welt einzubinden."}, {"radar": "javascript", "quadrant": 3, "ring": "einsetzen", "name": "Codelyzer", "kommentare": null, "desc": "Codelyzer ist eine Erweiterung für den TypeScript Linter TSLint. Codelyzer erweitert das Ruleset von TSLint um Regeln für Angular Projekte. Beispielsweise kann so in Projekten garantiert werden, dass alle Components und Directives der gleichen Namenkonvention folgen."}]
